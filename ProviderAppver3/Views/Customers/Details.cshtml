@model ProviderAppver3.Customer


<script src="https://api.mqcdn.com/sdk/mapquest-js/v1.3.2/mapquest.js"></script>
<link type="text/css" rel="stylesheet" href="https://api.mqcdn.com/sdk/mapquest-js/v1.3.2/mapquest.css" />
<body>
    @*modal code begin*@
    <div id="overlay">
        <div>
            <h2>Average Highest Customer Rating</h2>
            <h3 style="display:inline-block" id="providerName"></h3>
            <span class="starFadeN" id="sRate1"></span><span class="starFadeN" id="sRate2"></span><span class="starFadeN" id="sRate3"></span><span class="starFadeN" id="sRate4"></span><span class="starFadeN" id="sRate5"></span>
            <br>
            <h2>Lowest Average Price</h2>
            <h3 style="display:inline-block" id="providerName1"></h3>
            <br>
            <h2>Closest Provider to You</h2>
            <h3 style="display:inline-block" id="providerName2"></h3>
            <br>

            <a href='#' onclick='overlay()'>Click here to close</a>

        </div>
    </div>
    @*modal code end*@
    <h4>Welcome @ViewBag.Name</h4>

    <div class="row" id="ratingDiv" style="display:none">
        <div class="col">

            <button href='#' onclick="overlay((document.getElementById('textbox').value)), GetProvRankings(document.getElementById('textbox').value) ">Top rated active providers</button>

        </div>
    </div>

    <hr />
    <div class="row">
        <div class="col-5">
            <div class="search-container">
                <input type="text" id="textbox" onfocus="ClearMap()" placeholder="Search For Services">
                <input type="button" onclick="LoadProviders((document.getElementById('textbox').value))" value="Submit" />
            </div>
        </div>
    </div>
    <div id="dialog" title="Your Message Has Been Sent" style="display: none">
        <p>Your message has been sent. Click <span><a id="chatlink" href="">here</a></span> to view.</p>
        <button onclick="Closediv()">Close</button>
    </div>
    <div class="row">
        <div class="col" id='map'></div>
    </div>
    <p>
        @Html.ActionLink("Edit", "Edit", new { id = Model.CustomerID }) |
        @Html.ActionLink("Back to List", "Index")
    </p>




    <!-- popup -->

</body>
<script src="~/Scripts/jquery-3.3.1.min.js"></script>

<script>
        //Chris - Generates customer marker
        var custLat;
        var custLng;
        var distance;
    var map;
        var OurRequest = new XMLHttpRequest()
        OurRequest.open('Get', 'http://www.mapquestapi.com/geocoding/v1/address?key=b13zAYNPuUz6uaAeUCrHk3BvhAt0UnR6&location=' + '@ViewBag.Address')
    OurRequest.onload = function () {
        var ourdata = JSON.parse(OurRequest.responseText);
        console.log(ourdata)
        LoadMap(ourdata)
    };
    OurRequest.send();
        //Chris - End of customer marker code

        //Chris - Loads the map and all the controls
    function LoadMap(results) {
        L.mapquest.key = 'b13zAYNPuUz6uaAeUCrHk3BvhAt0UnR6';
        // 'map' refers to a <div> element with the ID map
        var baseLayer = L.mapquest.tileLayer('map');
        map = L.mapquest.map('map', {
            center: [results.results[0].locations[0].displayLatLng.lat, results.results[0].locations[0].displayLatLng.lng],
            layers: [baseLayer, fg],
            zoom: 15
        });
        map.addControl(L.mapquest.control());
        var marker = L.mapquest.textMarker([results.results[0].locations[0].displayLatLng.lat, results.results[0].locations[0].displayLatLng.lng], {
            text: '@ViewBag.Name',
            position: 'right',
            type: 'marker',
            icon: {
                primaryColor: '#333333',
                secondaryColor: '#333333',
                size: 'sm'
            }
        });
        marker.addTo(map);
        custLat = results.results[0].locations[0].displayLatLng.lat;
        custLng = results.results[0].locations[0].displayLatLng.lng;
        L.control.layers({
            'Map': baseLayer,
            'Hybrid': L.mapquest.tileLayer('hybrid'),
            'Satellite': L.mapquest.tileLayer('satellite'),
            'Light': L.mapquest.tileLayer('light'),
            'Dark': L.mapquest.tileLayer('dark')
        }).addTo(map);
    };

    //pete get top ranking of providers script
        function GetProvRankings(text) {
            $.post('/Customers/GetProvRankings', { text: text }, function (providers) {
                console.log(providers);
                document.getElementById('providerName').innerHTML = providers.providerName
                document.getElementById('providerName1').innerHTML = providers.providerName
                for (var i = 1; i <= providers.maxRating; i++) {
                     $("#sRate" + i).attr('class', 'starGlowN');
                 }
            });
        }

        //Chris - goes to customer controller to Get Snow Providers function and passes info to AddMarkersToMap function
        var providers;
    function LoadProviders(text) {
        $.post('/Customers/GetSnowProviders', { text: text }, function (providers) {

            console.log(providers);
            providers = providers;
            addMarkersToMap(providers);
            document.getElementById('ratingDiv').style.display = "block";
        });
    }
        //Chris - This concats a url that pulls an array of customer details back then sends to CreateCustMarker function
    function addMarkersToMap(providers) {
        var RequestUrl = 'www.mapquestapi.com/geocoding/v1/batch?&inFormat=kvp&outFormat=json&thumbMaps=false&maxResults=1&location=';
        for (var i = 0; i < providers.length; i++) {
            if (i == 0) {
                RequestUrl += providers[i].Description;
            }
            else {
                RequestUrl += '&location=' + providers[i].Description;
            }
            console.log(providers[i].Description)
        }
        RequestUrl += '&key=b13zAYNPuUz6uaAeUCrHk3BvhAt0UnR6'
        console.log(RequestUrl);
        var OurRequest = new XMLHttpRequest()
        OurRequest.open('Get', 'http://' + RequestUrl)
        OurRequest.onload = function () {
            var custdata = JSON.parse(OurRequest.responseText);
            console.log(custdata)
            CreateCustMarker(custdata, providers);
        };
        OurRequest.send();
    };
        var icon;
        var fg = L.featureGroup();

        var MapData = [];
        var IndvMark = [];

        //Chris - This function generates both the provider markers and the text bubbles inside them - looks confusing because in order to put html inside of the popup, the html has to be in a string, but putting it directly into the popup will display the code. This way is the way it works.
    function CreateCustMarker(custdata, providers) {
        for (var i = 0; i < providers.length; i++) {
            var providerID = providers[i].ProviderID;
            var proLat = custdata.results[i].locations[0].displayLatLng.lat;
            var proLng = custdata.results[i].locations[0].displayLatLng.lng;
            var unit = "K";
            var Data = {
                ProID: providerID,
                ProLat: proLat,
                ProLng: proLng,
                CustLat: custLat,
                CustLng: custLng,
                Unit: unit
            };
            MapData.push(Data);
        }

        //Chris-provider marker style
        for (var i = 0; i < providers.length; i++) {

            icon = L.mapquest.textMarker([custdata.results[i].locations[0].displayLatLng.lat, custdata.results[i].locations[0].displayLatLng.lng], {
                text: providers[i].ProviderName,
                position: 'right',
                type: 'marker',
                icon: {
                    primaryColor: '#3582ff',
                    secondaryColor: '#ff3535',
                    size: 'sm'
                }

            });

            //chris - popup contents
            var rate = providers[i].ProviderPhone;
            var rating = rate + '/5 Stars'
            if (rate == 0) {
                rating = "This Provider has not yet been rated"
            }
            var pid = providers[i].ProviderID;
            console.log(pid)
            var text = providers[i].ProviderName;
            var link = '<a href="/Providers/Details/1" target="_blank" style="font-size:20px">name</a>';
            link = link.replace('name', text);
            link = link.replace('1', pid);
            var button = '<button class="btn btn-danger" onclick="OpenChat(provider)">Get A Quote</button>';
            button = button.replace('provider', pid);
            var premium = '<button class="btn btn-warning" onclick="PaymentProcessed()">Pay Premium</button>';

            icon.addTo(fg);
            icon.bindPopup(link + '<hr/>' + rating + '<br/>' + button + '  OR  ' + premium).addTo(fg);

        }
        $.ajax({
            //url: '/Customers/GetDistance',
            url: "@Url.Action("GetDist")",
            dataType: 'json',
            type: 'POST',
            data: JSON.stringify(MapData),
            contentType: 'application/json; charset=utf-8',
            success: function (providerName) {
                document.getElementById('providerName2').innerHTML = providerName
            },
            error: function () {
                alert("error");
            }
        });
    }

        //Chris chat script
        function OpenChat(pid) {
            var cid =  @Html.DisplayFor(m => m.CustomerID);
            var search = document.getElementById("textbox").value;
            var cname = "@ViewBag.Name";
            var message = "NULL";
            console.log(search);
            $.post('/Chats/CreateFromMap', { cid: cid, pid: pid, search: search, cname: cname, message: message}, function (chatid) {
                var chathref = "/Chats/Details/" + chatid;
                var a = document.getElementById("chatlink");
                a.setAttribute('href', chathref);
                document.getElementById('dialog').style.display = "block";
            });
        }

    function Closediv() {
        document.getElementById('dialog').style.display = "none";
    }

        //chris - just a temp button for now until we get to payment info
        function PaymentProcessed() {
            alert('Your payment has been processed. Thank you.');
        }

        //Chris - clears provider markers when new entry is sent
        function ClearMap() {
            var layers = fg.getLayers();

            for (var i = 0; i < layers.length; i++) {
                fg.removeLayer(layers[i]);
            }
        }
 //pete modal script

        function overlay() {
            el = document.getElementById("overlay");
            el.style.visibility = (el.style.visibility == "visible") ? "hidden" : "visible";
        }

        function SCRate() {
            var totalRating = document.getElementById('providerRating').innerHTML.value;

        for (var i = 1; i <= totalRating; i++) {
            $("#sRate" + i).attr('class', 'starGlowN');
        }
    }
    $(function(){
        SCRate();
    });
</script>
